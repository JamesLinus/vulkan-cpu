/*
 * Copyright 2017 Jacob Lifshay
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
#include "generate.h"

namespace vulkan_cpu
{
namespace generate_spirv_parser
{
namespace generate
{
Generator::Generator_state::Generator_state(const Generator *generator,
                                            Generator_args &generator_args)
    : generator_args(generator_args),
      indent_level(0),
      full_output_file_name(generator_args.output_directory + "/"
                            + generator->output_base_file_name),
      os()
{
    os.exceptions(std::ios::badbit | std::ios::failbit);
}

void Generator::Generator_state::open_output_file()
{
    os.open(full_output_file_name);
}

constexpr Generator::Indent_t Generator::indent;

void Generator::write_indent(Generator_state &state)
{
    static constexpr auto indent_string = "    ";
    for(std::size_t i = state.indent_level; i > 0; i--)
        state << indent_string;
}

void Generator::write_automatically_generated_file_warning(Generator_state &state)
{
    state << "/* This file is automatically generated by "
             "generate_spirv_parser. DO NOT MODIFY. */\n";
}

void Generator::write_copyright_comment(Generator_state &state, const ast::Copyright &copyright)
{
    state << "/*\n";
    for(auto &line : copyright.lines)
    {
        if(line.empty())
        {
            state << " *\n";
            continue;
        }
        state << " * ";
        bool was_last_star = false;
        for(char ch : line)
        {
            if(was_last_star && ch == '/')
                state << ' ';
            was_last_star = (ch == '*');
            state << ch;
        }
        state << "\n";
    }
    state << " */\n";
}

struct Spirv_header_generator final : public Generator
{
    Spirv_header_generator() : Generator("spirv.h")
    {
    }
    virtual void run(Generator_args &generator_args, const ast::Top_level &top_level) const override
    {
        Generator_state state(this, generator_args);
        state.open_output_file();
        write_file_comments(state, top_level.copyright);
#warning finish
    }
};

std::unique_ptr<Generator> Generators::make_spirv_header_generator()
{
    return std::unique_ptr<Generator>(new Spirv_header_generator);
}
}
}
}